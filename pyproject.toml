# -- Build system requirements (PEP 518) --

[build-system]
build-backend = 'setuptools.build_meta'
requires = ['setuptools>=61.0', 'wheel>=0.40.0']

# -- dependency groups --
[dependency-groups]
build = [
  "bump-my-version>=0.16.0",
  "pip>=22.1.1",
  "setuptools>=70.1.1",
  "wheel>=0.45.0",
  "wget>=3.2"
]
dev = [
  {include-group = "build"},
  {include-group = "docs"},
  {include-group = "lint"},
  {include-group = "test"},
  {include-group = "typing"}
]
docs = [
  "esbonio>=0.16.0",
  "myst-parser>=4.0.0",
  "sphinx==7.3.7",
  "sphinx-math-dollar>=1.2.1",
  "sphinx-rtd-theme>=3.0.1",
  "sphinx-toolbox>=3.8.1",
  "TexSoup>=0.3.1"
]
lint = [
  "pre-commit>=4.0.1",
  "ruff>=0.8.0",
  "tach>=0.23.0",
  'validate-pyproject-schema-store[all]>=2025.06.13'
]
scripts = ["typer>=0.12.3", "pytest"]
test = [
  # workspace members
  "icon4py-testing>=0.0.6",
  # external dependencies
  "coverage[toml]>=7.5.0",
  "nox @ git+https://github.com/wntrblm/nox.git@aa09595437608dfe21eb776d8a4bcc0bd5f9916b",  # TODO(): remove once there is any release newer than 2024.10.09
  "pytest>=8.0.1",
  "pytest-benchmark>=5.0.0",
  "pytest-cache>=1.0",
  "pytest-cov>=5.0.0",
  "pytest-deadfixtures>=2.2.1",
  "pytest-factoryboy>=2.6.1",
  "pytest-mpi>=0.6",
  "pytest-unused-fixtures>=0.2.0",
  "pytest-xdist[psutil]>=3.5.0"
]
typing = [
  "mypy[faster-cache]>=1.13.0",
  "typing-extensions>=4.11.0",
  "types-cffi>=1.16.0"
]

# -- Standard project description options (PEP 621) --
[project]
authors = [{email = "gridtools@cscs.ch", name = "ETH Zurich"}]
classifiers = [
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Science/Research',
  'License :: OSI Approved :: BSD License',
  'Operating System :: POSIX',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: Implementation :: CPython',
  'Topic :: Scientific/Engineering :: Atmospheric Science',
  'Topic :: Scientific/Engineering :: Mathematics',
  'Topic :: Scientific/Engineering :: Physics'
]
dependencies = [
  "icon4py-atmosphere-advection>=0.0.6",
  "icon4py-atmosphere-diffusion>=0.0.6",
  "icon4py-atmosphere-dycore>=0.0.6",
  "icon4py-atmosphere-microphysics>=0.0.6",
  "icon4py-atmosphere-muphys>=0.0.6",
  "icon4py-common>=0.0.6",
  "icon4py-driver>=0.0.6"
]
description = 'ICON model in Python.'
license = {text = "BSD-3 License"}
name = "icon4py"
readme = "README.md"
requires-python = ">=3.10"
# managed by bump-my-version:
version = "0.0.6"

[project.optional-dependencies]
all = ["icon4py[dace,distributed,fortran,io,testing]"]
cuda11 = ["icon4py-common[cuda11]"]
cuda12 = ["icon4py-common[cuda12]"]
dace = ["icon4py-common[dace]"]
distributed = ["icon4py-common[distributed]"]
fortran = ["icon4py-tools>=0.0.6"]
io = ["icon4py-common[io]"]
testing = ["icon4py-testing"]

[project.urls]
Homepage = 'https://github.com/C2SM/icon4py'

# -- bumpversion --
[tool.bumpversion]
allow_dirty = false
commit = false
current_version = "0.0.6"
ignore_missing_version = false
message = 'Bump icon4py version: {current_version} â†’ {new_version}'
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)?"
serialize = ["{major}.{minor}.{patch}"]
tag = false

[[tool.bumpversion.files]]
filename = "pyproject.toml"
replace = '''
# managed by bump-my-version:
version = "{new_version}"
'''
search = '''
# managed by bump-my-version:
version = "{current_version}"
'''

# -- mypy --
[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
explicit_package_bases = true
# exclude = [
# '^tests/py2fgen/*.py',
# ]
ignore_missing_imports = false
implicit_reexport = true
mypy_path = "model/common/src:model/testing/src:tools/src"
namespace_packages = true
# install_types = true
# non_interactive = true
show_column_numbers = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

# TODO(): fix gtx.int32 export in gt4py
[[tool.mypy.overrides]]
disable_error_code = ["attr-defined", "name-defined"]
module = '*.stencil_tests.*'

[[tool.mypy.overrides]]
ignore_errors = true
module = [
  'icon4py.model.testing.fixtures.datatest',
  'icon4py.model.testing.pytest_hooks',
  'icon4py.model.testing.serialbox',
  'icon4py.tools.py2fgen.wrappers.diffusion_wrapper',
  'icon4py.tools.py2fgen.wrappers.dycore_wrapper',
  'icon4py.tools.py2fgen.wrappers.grid_wrapper'
]

# -- pytest --
[tool.pytest]

[tool.pytest.ini_options]
addopts = ['-p icon4py.model.testing.pytest_hooks', '--strict-markers']
markers = [
  "embedded_remap_error",
  "embedded_static_args",
  "uses_as_offset",
  "skip_value_error",
  "datatest",
  "embedded_only",
  "uses_concat_where",
  "cpu_only",
  "infinite_concat_where",
  "gtfn_too_slow",
  "to_performance_dashboard"
]
pythonpath = [
  "model/atmosphere/diffusion",
  "model/atmosphere/dycore",
  "model/atmosphere/subgrid_scale_physics/microphysics",
  "model/atmosphere/subgrid_scale_physics/muphys",
  "model/common",
  "model/driver",
  "model/testing"
]

# -- ruff --
[tool.ruff]
line-length = 100
respect-gitignore = true
show-fixes = true
target-version = "py310"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# -- Rules set to be considered --
exclude = ["**/tests/**"]
explicit-preview-rules = true
ignore = [
  'E501',  # [line-too-long]
  'B905',  # [zip-without-explicit-strict]  # TODO(egparedes): activate when possible
  'PLR0913',  # [too-many-arguments]  # TODO(egparedes): activate when possible
  'PLR2004',  # [magic-value-comparison]  # TODO(egparedes): activate when possible
  'PLR5501',  # [collapsible-else-if]  # TODO(egparedes): rediscuss in future
  'SIM102',  # [collapsible-if]  # TODO(egparedes): rediscuss in future
  'TD003',  # [missing-todo-link]
  'UP038'  # [non-pep604-isinstance]
]
preview = true  # use only with explicit-preview-rules=true
select = [
  'A',  # flake8-builtins
  'B',  # flake8-bugbear
  # 'C4', #  flake8-comprehensions
  'CPY',  # flake8-copyright
  # 'D', #  pydocstyle
  'DOC',  # pydoclint
  'E',  # pycodestyle
  'ERA',  # eradicate
  'F',  # Pyflakes
  'F822',  # [undefined-export] (preview)  # TODO(egparedes): remove when not longer in preview
  'FA100',  # future-rewritable-type-annotation
  # 'FBT',  # flake8-boolean-trap
  'FLY',  # flynt
  'I',  # isort
  # 'ICN',  # flake8-import-conventions
  'ISC',  # flake8-implicit-str-concat
  # 'N',  # pep8-naming
  'NPY',  # NumPy-specific rules
  'PERF',  # Perflint
  'PGH',  # pygrep-hooks
  'PLC',  # Pylint-Convention
  'PLE',  # Pylint-Error
  'PLR',  # Pylint-Refactor
  'PLW',  # Pylint-Warning
  'PTH',  # flake8-use-pathlib
  'Q',  # flake8-quotes
  'RUF',  # Ruff-specific rules
  'SIM',  # flake8-simplify
  'T10',  # flake8-debugger
  'TD',  # flake8-todos
  'UP',  # pyupgrade
  'YTT'  # flake8-2020
]
typing-modules = ['gt4py.eve.extended_typing']
unfixable = []

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ['icon4py']
known-third-party = ['gt4py', 'packaging', 'setuptools']
lines-after-imports = 2
order-by-type = true
section-order = [
  'future',
  'standard-library',
  'third-party',
  'first-party',
  'tests',
  'local-folder'
]
split-on-trailing-comma = false

[tool.ruff.lint.isort.sections]
'tests' = ['tests']

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]
# Avoid messing up conditions in gt4py stencils
"**/model/**/stencils/*.py" = ["SIM300"]
# Ignore spurious errors when explicitly importing fixtures in tests.
# Check: https://github.com/astral-sh/ruff/issues/10662
"**/tests/**/*_test.py" = ["F401", "F811"]
"**/tests/**/fixtures.py" = ["F401", "F811"]
"**/tests/**/test_*.py" = ["F401", "F811"]

[tool.ruff.lint.pylint]
max-branches = 12
max-statements = 60

# -- setuptools --
[tool.setuptools]
packages = []

# -- uv: packages & workspace --
[tool.uv]
conflicts = [[{extra = "cuda11"}, {extra = "cuda12"}]]

[[tool.uv.index]]
explicit = true
name = "test.pypi"
url = "https://test.pypi.org/simple/"

[tool.uv.sources]
dace = {git = "https://github.com/GridTools/dace", tag = "__gt4py-next-integration_2025_08_06"}
# ghex = {git = "https://github.com/ghex-org/GHEX.git", branch = "master"}
# gt4py = {git = "https://github.com/GridTools/gt4py", branch = "main"}
# gt4py = {index = "test.pypi"}
icon4py-atmosphere-advection = {workspace = true}
icon4py-atmosphere-diffusion = {workspace = true}
icon4py-atmosphere-dycore = {workspace = true}
icon4py-atmosphere-microphysics = {workspace = true}
icon4py-atmosphere-muphys = {workspace = true}
icon4py-common = {workspace = true}
icon4py-driver = {workspace = true}
icon4py-testing = {workspace = true}
icon4py-tools = {workspace = true}
serialbox4py = {index = "test.pypi"}

[tool.uv.workspace]
members = [
  "model/atmosphere/advection",
  "model/atmosphere/diffusion",
  "model/atmosphere/dycore",
  "model/atmosphere/subgrid_scale_physics/microphysics",
  "model/atmosphere/subgrid_scale_physics/muphys",
  "model/common",
  "model/driver",
  "model/testing",
  "tools"
]

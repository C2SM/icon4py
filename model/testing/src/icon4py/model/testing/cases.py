# ICON4Py - ICON inspired code in Python and GT4Py
#
# Copyright (c) 2022-2024, ETH Zurich and MeteoSwiss
# All rights reserved.
#
# Please, refer to the LICENSE file in the root directory.
# SPDX-License-Identifier: BSD-3-Clause

from __future__ import annotations

import enum
import os
import pathlib
import uuid
from collections.abc import Mapping
from typing import Any, Final, NamedTuple, TypedDict

from typing_extensions import ReadOnly


_MODEL_TESTING_SRC_PATH: Final = (pathlib.Path(__file__).parent / ".." / ".." / "..").resolve()
_MODEL_ROOT_PATH: Final = (_MODEL_TESTING_SRC_PATH / ".." / "..").resolve()
_REPO_ROOT_PATH: Final = (_MODEL_ROOT_PATH / ".." ).resolve()

DEFAULT_TEST_DATA_FOLDER: Final = "testdata"
TEST_DATA_PATH: Final[pathlib.Path] = pathlib.Path(
    os.getenv("TEST_DATA_PATH") or (_REPO_ROOT_PATH / DEFAULT_TEST_DATA_FOLDER)
).resolve()
GRIDS_PATH: Final[pathlib.Path] = (TEST_DATA_PATH / "grids").resolve()
SERIALIZED_DATA_PATH: Final[pathlib.Path] = (TEST_DATA_PATH / "ser_icondata").resolve()


# -- Grids --
class GridKind(str, enum.Enum):
    REGIONAL = "REGIONAL"
    GLOBAL = "GLOBAL"
    TORUS = "TORUS"

    def __repr__(self):
        return str.__repr__(self)

    def __str__(self):
        return str.__str__(self)


class GridSizesDict(TypedDict):
    cell: ReadOnly[int]
    edge: ReadOnly[int]
    vertex: ReadOnly[int]


class GridDefinitionTuple(NamedTuple):
    description: str
    kind: GridKind
    sizes: GridSizesDict
    R_B_numbers: tuple[int, int] | None = None
    file_name: str | None = None
    uri: str | None = None
    uuid: uuid.UUID | None = None
    # uuid is an id encoded in the original grid file that was used to run
    # an experiment. Since it's not serialized when generating the test data
    # we store it also here.
    # TODO (@halungge): it probably becomes obsolete once we get the connectivities
    #   from the grid files.

    @property
    def download_file_path(self) -> pathlib.Path | None:
        return GRIDS_PATH / self.file_name if self.file_name else None

def define_grid(
    *,
    description: str,
    kind: GridKind,
    sizes: GridSizesDict,
    R_B_numbers: tuple[int, int] | None,
    file_name: str | None,
    uri: str | None,
    uuid: uuid.UUID | None,
) -> GridDefinitionTuple:
    return GridDefinitionTuple(
        description=description,
        kind=kind,
        sizes=GridSizesDict(**sizes),
        R_B_numbers=R_B_numbers,
        file_name=file_name,
        uri=uri,
        uuid=uuid,
    )


class Grid(GridDefinitionTuple, enum.Enum):
    SIMPLE = define_grid(
        description="Torus grid, fully defined in code (simple.py) used for testing",
        kind=GridKind.TORUS,
        sizes=GridSizesDict(cell=18, vertex=9, edge=27),
        R_B_numbers=None,
        file_name=None,
        uri=None,
        uuid=None,
    )

    R02B04_GLOBAL = define_grid(
        description="R02B04, small global grid, default grid udata_fixt_for_a_bsed in ICON testing, origin of this file is unclear (source = icon-dev)",
        kind=GridKind.GLOBAL,
        sizes=GridSizesDict(cell=20480, vertex=10242, edge=30720),
        R_B_numbers=(2, 4),
        file_name="icon_grid_0013_R02B04_R.nc",
        uri="https://polybox.ethz.ch/index.php/s/BRiF7XrCCpGqpEF/download",
        uuid=uuid.UUID("af122aca-1dd2-11b2-a7f8-c7bf6bc21eba"),
    )

    R02B07_GLOBAL = define_grid(
        description="R02B07, large global grid, generated by MPI-M GridGenerator",
        kind=GridKind.GLOBAL,
        sizes=GridSizesDict(cell=1310720, vertex=655362, edge=1966080),
        R_B_numbers=(2, 7),
        file_name="icon_grid_0023_R02B07_G.nc",
        uri="https://polybox.ethz.ch/index.php/s/RMqNbaeHLD5tDd6/download",
        uuid=None,
    )

    R19_B07_MCH_LOCAL = define_grid(
        description="Grid used in the full icon-ch2 (2km resolution) operational setup of MeteoSwiss, generated by icontools (DWD)",
        kind=GridKind.REGIONAL,
        sizes=GridSizesDict(cell=283876, vertex=142724, edge=426599),
        R_B_numbers=(19, 7),
        file_name="icon_grid_0002_R19B07_mch.nc",
        uri="https://polybox.ethz.ch/index.php/s/tFQian4aDzTES6c/download",
        uuid=None,
    )

    MCH_OPR_R04B07_DOMAIN01 = define_grid(
        description="Grid used in the icon-ch2_small experiment (generated by IconTools (DWD) (used by MeteoSwiss for verification of icon-ch2 setup) )",
        kind=GridKind.REGIONAL,
        sizes=GridSizesDict(cell=10700, vertex=5510, edge=16209),
        R_B_numbers=(4, 7),
        file_name="mch_opr_r4b7_DOM01.nc",
        uri="https://polybox.ethz.ch/index.php/s/ZL7LeEDijGCSJGz/download",
        uuid=None,
    )

    MCH_OPR_R19B08_DOMAIN01 = define_grid(
        description="Grid used in some older MCH experiment, suitable for running single GPU benchmarks",
        kind=GridKind.REGIONAL,
        sizes=GridSizesDict(cell=44528, vertex=22569, edge=67096),
        R_B_numbers=(19, 8),
        file_name="domain1_DOM01.nc",
        uri="https://polybox.ethz.ch/index.php/s/P6XfWcYjnrsNmeX/download",
        uuid=None,
    )

    MCH_CH_R04B09_DSL = define_grid(
        description="grid used in the mch_ch_r04b09_dsl experiment used for verification of ICON-exclaim DSL port, generated by IconTools (DWD)",
        kind=GridKind.REGIONAL,
        sizes=GridSizesDict(cell=20896, vertex=10663, edge=31558),
        R_B_numbers=(4, 9),
        file_name="grid.nc",
        uri="https://polybox.ethz.ch/index.php/s/hD232znfEPBh4Oh/download",
        uuid=uuid.UUID("af122aca-1dd2-11b2-a7f8-c7bf6bc21eba"),
    )

    TORUS_100X116_1000M = define_grid(
        description="Torus grid with a domain (100x116) vertices and a resolution (edge length) of 1000m, generated by MPI-M GridGenerator ",
        kind=GridKind.TORUS,
        sizes=GridSizesDict(cell=23200, vertex=11600, edge=34800),
        R_B_numbers=(0, 2),  # these magic values are set in all torus grid files.
        file_name="Torus_Triangles_100x116_1000m.nc",
        uri="https://polybox.ethz.ch/index.php/s/yqvotFss9i1OKzs/download",
        uuid=None,
    )

    TORUS_50000x5000 = define_grid(
        description="Torus grid with a resolution (edge_length) of 757m, generated by MPI-M GridGenerator",
        kind=GridKind.TORUS,
        sizes=GridSizesDict(cell=1056, vertex=52, edge=1584),
        R_B_numbers=(0, 2),  # these magic values are set in all torus grid files.
        file_name="Torus_Triangles_50000m_x_5000m_res500m.nc",
        uri="https://polybox.ethz.ch/index.php/s/eclzK00TM9nnLtE/download", # TODO: fix URL to compressed version
        uuid=uuid.UUID("80ae276e-ec54-11ee-bf58-e36354187f08"),
    )


def grids_by_kind(kind: GridKind) -> tuple[Grid, ...]:
    return tuple(grid for grid in Grid if grid.kind == kind)

def get_grids_with_file(*, max_cells: int | None=None, max_edges: int | None=None, max_vertices: int | None=None) -> tuple[Grid, ...]:
    grids = []
    for grid in Grid:
        if grid.file_name and (max_cells is None or grid.sizes["cell"] < max_cells) and \
           (max_edges is None or grid.sizes["edge"] < max_edges) and \
           (max_vertices is None or grid.sizes["vertex"] < max_vertices):
            grids.append(grid)

    return tuple(grids)

# -- Serialized Experiments --
class SerializedExperimentDefinitionTuple(NamedTuple):
    description: str
    grid: Grid
    num_levels: int
    partitioned_data: Mapping[int, str] | None = None


def define_serialized_experiment(
    *,
    description: str,
    grid: Grid,
    num_levels: int,
    partitioned_data: Mapping[int, str] | None,
) -> SerializedExperimentDefinitionTuple:
    return SerializedExperimentDefinitionTuple(
        description=description,
        grid=grid,
        num_levels=num_levels,
        partitioned_data=partitioned_data,
    )


class SerializedExperiment(SerializedExperimentDefinitionTuple, enum.Enum):
    EXCLAIM_APE_R02B04 = define_serialized_experiment(
        # code="exclaim_ape_R02B04",
        description="EXCLAIM Aquaplanet experiment",
        grid=Grid.R02B04_GLOBAL,
        num_levels=60,
        partitioned_data={1: "https://polybox.ethz.ch/index.php/s/2n2WpTgZFlTCTHu/download"},
    )

    MCH_CH_R04B09_DSL = define_serialized_experiment(
        # code="mch_ch_r04b09_dsl",
        description="Regional setup used by EXCLAIM to validate the icon-exclaim.",
        grid=Grid.MCH_CH_R04B09_DSL,
        num_levels=65,
        partitioned_data={
            1: "https://polybox.ethz.ch/index.php/s/f42nsmvgOoWZPzi/download",
            2: "https://polybox.ethz.ch/index.php/s/P6F6ZbzWHI881dZ/download",
            4: "https://polybox.ethz.ch/index.php/s/NfES3j9no15A0aX/download",
        },
    )

    JABW_R02B04 = define_serialized_experiment(
        # code="jabw_R02B04",
        description="Jablonowski Williamson atmospheric test case",
        grid=Grid.R02B04_GLOBAL,
        num_levels=35,
        partitioned_data={1: "https://polybox.ethz.ch/index.php/s/5W3Z2K6pyo0egzo/download"},
    )

    GAUSS3D_TORUS = define_serialized_experiment(
        # code="gauss3d_torus",
        description="Gauss 3d test case",
        grid=Grid.TORUS_50000x5000,
        num_levels=35,
        partitioned_data={1: "https://polybox.ethz.ch/index.php/s/ZuqDIREPVits9r0/download"},
    )

    WEISMAN_KLEMP_TORUS = define_serialized_experiment(
        # code="weisman_klemp_torus",
        description="Weisman-Klemp experiment on Torus Grid",
        grid=Grid.TORUS_50000x5000,
        num_levels=64,
        partitioned_data={1: "https://polybox.ethz.ch/index.php/s/ByLnyii7MMRHJbK/download"},
    )


# -- Standalone Experiments --
class StandaloneExperimentDefinitionTuple(NamedTuple):
    description: str
    num_levels: int
    configuration: Mapping[str, Any]


def define_standalone_experiment(
    *,
    description: str,
    num_levels: int,
    configuration: Mapping[str, Any],
) -> StandaloneExperimentDefinitionTuple:
    return StandaloneExperimentDefinitionTuple(
        description=description,
        num_levels=num_levels,
        configuration=configuration,
    )


class StandaloneExperiment(StandaloneExperimentDefinitionTuple, enum.Enum):
    EXCLAIM_APE_FOO = define_standalone_experiment(description="EXCLAIM Aquaplanet experiment", num_levels=60,configuration={})

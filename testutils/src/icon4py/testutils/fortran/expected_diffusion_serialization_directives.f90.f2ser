[GeneratedCode(startln=280, source='\n    !$ser verbatim real, dimension(:,:,:), allocatable :: edges_primal_normal_vert_v1\n\n    !$ser verbatim real, dimension(:,:,:), allocatable :: edges_primal_normal_vert_v2\n\n    !$ser verbatim real, dimension(:,:,:), allocatable :: edges_dual_normal_vert_v1\n\n    !$ser verbatim real, dimension(:,:,:), allocatable :: edges_dual_normal_vert_v2\n\n    !$ser verbatim real, dimension(:,:,:), allocatable :: edges_primal_normal_cell_v1\n\n    !$ser verbatim real, dimension(:,:,:), allocatable :: edges_primal_normal_cell_v2\n\n    !$ser verbatim real, dimension(:,:,:), allocatable :: edges_dual_normal_cell_v1\n\n    !$ser verbatim real, dimension(:,:,:), allocatable :: edges_dual_normal_cell_v2\n\n    !$ser init directory="." prefix="test"\n\n    !$ser savepoint diffusion_init_in\n\n    !$ser verbatim allocate(edges_primal_normal_vert_v1(size(edges_primal_normal_vert, 1), size(edges_primal_normal_vert, 2), size(edges_primal_normal_vert, 3)))\n    !$ser data edges_primal_normal_vert_v1=edges_primal_normal_vert_v1(:,:,:)\n    !$ser verbatim deallocate(edges_primal_normal_vert_v1)\n\n    !$ser verbatim allocate(edges_primal_normal_vert_v2(size(edges_primal_normal_vert, 1), size(edges_primal_normal_vert, 2), size(edges_primal_normal_vert, 3)))\n    !$ser data edges_primal_normal_vert_v2=edges_primal_normal_vert_v2(:,:,:)\n    !$ser verbatim deallocate(edges_primal_normal_vert_v2)\n\n    !$ser verbatim allocate(edges_dual_normal_vert_v1(size(edges_dual_normal_vert, 1), size(edges_dual_normal_vert, 2), size(edges_dual_normal_vert, 3)))\n    !$ser data edges_dual_normal_vert_v1=edges_dual_normal_vert_v1(:,:,:)\n    !$ser verbatim deallocate(edges_dual_normal_vert_v1)\n\n    !$ser verbatim allocate(edges_dual_normal_vert_v2(size(edges_dual_normal_vert, 1), size(edges_dual_normal_vert, 2), size(edges_dual_normal_vert, 3)))\n    !$ser data edges_dual_normal_vert_v2=edges_dual_normal_vert_v2(:,:,:)\n    !$ser verbatim deallocate(edges_dual_normal_vert_v2)\n\n    !$ser verbatim allocate(edges_primal_normal_cell_v1(size(edges_primal_normal_cell, 1), size(edges_primal_normal_cell, 2), size(edges_primal_normal_cell, 3)))\n    !$ser data edges_primal_normal_cell_v1=edges_primal_normal_cell_v1(:,:,:)\n    !$ser verbatim deallocate(edges_primal_normal_cell_v1)\n\n    !$ser verbatim allocate(edges_primal_normal_cell_v2(size(edges_primal_normal_cell, 1), size(edges_primal_normal_cell, 2), size(edges_primal_normal_cell, 3)))\n    !$ser data edges_primal_normal_cell_v2=edges_primal_normal_cell_v2(:,:,:)\n    !$ser verbatim deallocate(edges_primal_normal_cell_v2)\n\n    !$ser verbatim allocate(edges_dual_normal_cell_v1(size(edges_dual_normal_cell, 1), size(edges_dual_normal_cell, 2), size(edges_dual_normal_cell, 3)))\n    !$ser data edges_dual_normal_cell_v1=edges_dual_normal_cell_v1(:,:,:)\n    !$ser verbatim deallocate(edges_dual_normal_cell_v1)\n\n    !$ser verbatim allocate(edges_dual_normal_cell_v2(size(edges_dual_normal_cell, 1), size(edges_dual_normal_cell, 2), size(edges_dual_normal_cell, 3)))\n    !$ser data edges_dual_normal_cell_v2=edges_dual_normal_cell_v2(:,:,:)\n    !$ser verbatim deallocate(edges_dual_normal_cell_v2)\n\n    !$ser data cvd_o_rd=cvd_o_rd\n\n    !$ser data grav=grav\n\n    !$ser data jg=jg\n\n    !$ser data nproma=nproma\n\n    !$ser data nlev=nlev\n\n    !$ser data nblks_e=nblks_e\n\n    !$ser data nblks_v=nblks_v\n\n    !$ser data nblks_c=nblks_c\n\n    !$ser data nshift=nshift\n\n    !$ser data nshift_total=nshift_total\n\n    !$ser data nrdmax=nrdmax\n\n    !$ser data ndyn_substeps=ndyn_substeps\n\n    !$ser data hdiff_order=hdiff_order\n\n    !$ser data itype_comm=itype_comm\n\n    !$ser data itype_sher=itype_sher\n\n    !$ser data itype_vn_diffu=itype_vn_diffu\n\n    !$ser data itype_t_diffu=itype_t_diffu\n\n    !$ser data hdiff_smag_z=hdiff_smag_z\n\n    !$ser data hdiff_smag_z2=hdiff_smag_z2\n\n    !$ser data hdiff_smag_z3=hdiff_smag_z3\n\n    !$ser data hdiff_smag_z4=hdiff_smag_z4\n\n    !$ser data hdiff_smag_fac=hdiff_smag_fac\n\n    !$ser data hdiff_smag_fac2=hdiff_smag_fac2\n\n    !$ser data hdiff_smag_fac3=hdiff_smag_fac3\n\n    !$ser data hdiff_smag_fac4=hdiff_smag_fac4\n\n    !$ser data hdiff_efdt_ratio=hdiff_efdt_ratio\n\n    !$ser data k4=k4\n\n    !$ser data k4w=k4w\n\n    !$ser data nudge_max_coeff=nudge_max_coeff\n\n    !$ser data denom_diffu_v=denom_diffu_v\n\n    !$ser data p_test_run=p_test_run\n\n    !$ser data lphys=lphys\n\n    !$ser data lhdiff_rcf=lhdiff_rcf\n\n    !$ser data lhdiff_w=lhdiff_w\n\n    !$ser data lhdiff_temp=lhdiff_temp\n\n    !$ser data l_zdiffu_t=l_zdiffu_t\n\n    !$ser data l_limited_area=l_limited_area\n\n    !$ser data lfeedback=lfeedback\n\n    !$ser data ltkeshs=ltkeshs\n\n    !$ser data lsmag_3d=lsmag_3d\n\n    !$ser data lvert_nest=lvert_nest\n\n    !$ser data ltimer=ltimer\n\n    !$ser data ddt_vn_hdf_is_associated=ddt_vn_hdf_is_associated\n\n    !$ser data ddt_vn_dyn_is_associated=ddt_vn_dyn_is_associated\n\n    IF (SIZE(vct_a) > 0) THEN\n       !$ser data vct_a=vct_a(:)\n    ELSE\n       PRINT *, \'Warning: Array vct_a has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(c_lin_e) > 0) THEN\n       !$ser data c_lin_e=c_lin_e(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array c_lin_e has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(e_bln_c_s) > 0) THEN\n       !$ser data e_bln_c_s=e_bln_c_s(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array e_bln_c_s has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(e_bln_c_u) > 0) THEN\n       !$ser data e_bln_c_u=e_bln_c_u(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array e_bln_c_u has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(e_bln_c_v) > 0) THEN\n       !$ser data e_bln_c_v=e_bln_c_v(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array e_bln_c_v has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_aw_verts) > 0) THEN\n       !$ser data cells_aw_verts=cells_aw_verts(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array cells_aw_verts has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(geofac_div) > 0) THEN\n       !$ser data geofac_div=geofac_div(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array geofac_div has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(geofac_rot) > 0) THEN\n       !$ser data geofac_rot=geofac_rot(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array geofac_rot has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(geofac_n2s) > 0) THEN\n       !$ser data geofac_n2s=geofac_n2s(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array geofac_n2s has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(geofac_grg) > 0) THEN\n       !$ser data geofac_grg=geofac_grg(:,:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array geofac_grg has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(nudgecoeff_e) > 0) THEN\n       !$ser data nudgecoeff_e=nudgecoeff_e(:,:)\n    ELSE\n       PRINT *, \'Warning: Array nudgecoeff_e has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(rbf_vec_idx_v) > 0) THEN\n       !$ser data rbf_vec_idx_v=rbf_vec_idx_v(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array rbf_vec_idx_v has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(rbf_vec_blk_v) > 0) THEN\n       !$ser data rbf_vec_blk_v=rbf_vec_blk_v(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array rbf_vec_blk_v has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(rbf_vec_coeff_v) > 0) THEN\n       !$ser data rbf_vec_coeff_v=rbf_vec_coeff_v(:,:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array rbf_vec_coeff_v has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(enhfac_diffu) > 0) THEN\n       !$ser data enhfac_diffu=enhfac_diffu(:)\n    ELSE\n       PRINT *, \'Warning: Array enhfac_diffu has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(zd_intcoef) > 0) THEN\n       !$ser data zd_intcoef=zd_intcoef(:,:)\n    ELSE\n       PRINT *, \'Warning: Array zd_intcoef has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(zd_geofac) > 0) THEN\n       !$ser data zd_geofac=zd_geofac(:,:)\n    ELSE\n       PRINT *, \'Warning: Array zd_geofac has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(zd_diffcoef) > 0) THEN\n       !$ser data zd_diffcoef=zd_diffcoef(:)\n    ELSE\n       PRINT *, \'Warning: Array zd_diffcoef has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(wgtfac_c) > 0) THEN\n       !$ser data wgtfac_c=wgtfac_c(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array wgtfac_c has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(wgtfac_e) > 0) THEN\n       !$ser data wgtfac_e=wgtfac_e(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array wgtfac_e has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(wgtfacq_e) > 0) THEN\n       !$ser data wgtfacq_e=wgtfacq_e(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array wgtfacq_e has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(wgtfacq1_e) > 0) THEN\n       !$ser data wgtfacq1_e=wgtfacq1_e(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array wgtfacq1_e has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(ddqz_z_full_e) > 0) THEN\n       !$ser data ddqz_z_full_e=ddqz_z_full_e(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array ddqz_z_full_e has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(theta_ref_mc) > 0) THEN\n       !$ser data theta_ref_mc=theta_ref_mc(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array theta_ref_mc has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(zd_indlist) > 0) THEN\n       !$ser data zd_indlist=zd_indlist(:,:)\n    ELSE\n       PRINT *, \'Warning: Array zd_indlist has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(zd_blklist) > 0) THEN\n       !$ser data zd_blklist=zd_blklist(:,:)\n    ELSE\n       PRINT *, \'Warning: Array zd_blklist has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(zd_vertidx) > 0) THEN\n       !$ser data zd_vertidx=zd_vertidx(:,:)\n    ELSE\n       PRINT *, \'Warning: Array zd_vertidx has size 0. Not serializing array.\'\n    END IF\n\n    !$ser data zd_listdim=zd_listdim\n\n    IF (SIZE(edges_start_block) > 0) THEN\n       !$ser data edges_start_block=edges_start_block(min_rledge:)\n    ELSE\n       PRINT *, \'Warning: Array edges_start_block has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_end_block) > 0) THEN\n       !$ser data edges_end_block=edges_end_block(min_rledge:)\n    ELSE\n       PRINT *, \'Warning: Array edges_end_block has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_start_index) > 0) THEN\n       !$ser data edges_start_index=edges_start_index(min_rledge:)\n    ELSE\n       PRINT *, \'Warning: Array edges_start_index has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_end_index) > 0) THEN\n       !$ser data edges_end_index=edges_end_index(min_rledge:)\n    ELSE\n       PRINT *, \'Warning: Array edges_end_index has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_vertex_idx) > 0) THEN\n       !$ser data edges_vertex_idx=edges_vertex_idx(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_vertex_idx has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_vertex_blk) > 0) THEN\n       !$ser data edges_vertex_blk=edges_vertex_blk(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_vertex_blk has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_cell_idx) > 0) THEN\n       !$ser data edges_cell_idx=edges_cell_idx(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_cell_idx has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_cell_blk) > 0) THEN\n       !$ser data edges_cell_blk=edges_cell_blk(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_cell_blk has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_tangent_orientation) > 0) THEN\n       !$ser data edges_tangent_orientation=edges_tangent_orientation(:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_tangent_orientation has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_inv_vert_vert_length) > 0) THEN\n       !$ser data edges_inv_vert_vert_length=edges_inv_vert_vert_length(:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_inv_vert_vert_length has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_inv_primal_edge_length) > 0) THEN\n       !$ser data edges_inv_primal_edge_length=edges_inv_primal_edge_length(:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_inv_primal_edge_length has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_inv_dual_edge_length) > 0) THEN\n       !$ser data edges_inv_dual_edge_length=edges_inv_dual_edge_length(:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_inv_dual_edge_length has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(edges_area_edge) > 0) THEN\n       !$ser data edges_area_edge=edges_area_edge(:,:)\n    ELSE\n       PRINT *, \'Warning: Array edges_area_edge has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_start_block) > 0) THEN\n       !$ser data cells_start_block=cells_start_block(min_rlcell:)\n    ELSE\n       PRINT *, \'Warning: Array cells_start_block has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_end_block) > 0) THEN\n       !$ser data cells_end_block=cells_end_block(min_rlcell:)\n    ELSE\n       PRINT *, \'Warning: Array cells_end_block has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_start_index) > 0) THEN\n       !$ser data cells_start_index=cells_start_index(min_rlcell:)\n    ELSE\n       PRINT *, \'Warning: Array cells_start_index has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_end_index) > 0) THEN\n       !$ser data cells_end_index=cells_end_index(min_rlcell:)\n    ELSE\n       PRINT *, \'Warning: Array cells_end_index has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_neighbor_idx) > 0) THEN\n       !$ser data cells_neighbor_idx=cells_neighbor_idx(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array cells_neighbor_idx has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_neighbor_blk) > 0) THEN\n       !$ser data cells_neighbor_blk=cells_neighbor_blk(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array cells_neighbor_blk has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_edge_idx) > 0) THEN\n       !$ser data cells_edge_idx=cells_edge_idx(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array cells_edge_idx has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_edge_blk) > 0) THEN\n       !$ser data cells_edge_blk=cells_edge_blk(:,:,:)\n    ELSE\n       PRINT *, \'Warning: Array cells_edge_blk has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(cells_area) > 0) THEN\n       !$ser data cells_area=cells_area(:,:)\n    ELSE\n       PRINT *, \'Warning: Array cells_area has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(verts_start_block) > 0) THEN\n       !$ser data verts_start_block=verts_start_block(min_rlvert:)\n    ELSE\n       PRINT *, \'Warning: Array verts_start_block has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(verts_end_block) > 0) THEN\n       !$ser data verts_end_block=verts_end_block(min_rlvert:)\n    ELSE\n       PRINT *, \'Warning: Array verts_end_block has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(verts_start_index) > 0) THEN\n       !$ser data verts_start_index=verts_start_index(min_rlvert:)\n    ELSE\n       PRINT *, \'Warning: Array verts_start_index has size 0. Not serializing array.\'\n    END IF\n\n    IF (SIZE(verts_end_index) > 0) THEN\n       !$ser data verts_end_index=verts_end_index(min_rlvert:)\n    ELSE\n       PRINT *, \'Warning: Array verts_end_index has size 0. Not serializing array.\'\n    END IF'), GeneratedCode(startln=492, source="\n    !$ser savepoint diffusion_run_in\n\n    !$ser data jg=jg\n\n    !$ser data dtime=dtime\n\n    !$ser data linit=linit\n\n    IF (SIZE(vt) > 0) THEN\n       !$ser data vt=vt(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array vt has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(vn) > 0) THEN\n       !$ser data vn=vn(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array vn has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(w) > 0) THEN\n       !$ser data w=w(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array w has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(theta_v) > 0) THEN\n       !$ser data theta_v=theta_v(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array theta_v has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(exner) > 0) THEN\n       !$ser data exner=exner(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array exner has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(theta_v_ic) > 0) THEN\n       !$ser data theta_v_ic=theta_v_ic(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array theta_v_ic has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(ddt_vn_dyn) > 0) THEN\n       !$ser data ddt_vn_dyn=ddt_vn_dyn(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array ddt_vn_dyn has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(ddt_vn_hdf) > 0) THEN\n       !$ser data ddt_vn_hdf=ddt_vn_hdf(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array ddt_vn_hdf has size 0. Not serializing array.'\n    END IF"), GeneratedCode(startln=1965, source="\n    !$ser savepoint diffusion_run_out\n\n    IF (SIZE(div_ic) > 0) THEN\n       !$ser data div_ic=div_ic(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array div_ic has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(hdef_ic) > 0) THEN\n       !$ser data hdef_ic=hdef_ic(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array hdef_ic has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(dwdx) > 0) THEN\n       !$ser data dwdx=dwdx(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array dwdx has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(dwdy) > 0) THEN\n       !$ser data dwdy=dwdy(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array dwdy has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(vn) > 0) THEN\n       !$ser data vn=vn(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array vn has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(w) > 0) THEN\n       !$ser data w=w(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array w has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(theta_v) > 0) THEN\n       !$ser data theta_v=theta_v(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array theta_v has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(exner) > 0) THEN\n       !$ser data exner=exner(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array exner has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(theta_v_ic) > 0) THEN\n       !$ser data theta_v_ic=theta_v_ic(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array theta_v_ic has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(ddt_vn_dyn) > 0) THEN\n       !$ser data ddt_vn_dyn=ddt_vn_dyn(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array ddt_vn_dyn has size 0. Not serializing array.'\n    END IF\n\n    IF (SIZE(ddt_vn_hdf) > 0) THEN\n       !$ser data ddt_vn_hdf=ddt_vn_hdf(:,:,:)\n    ELSE\n       PRINT *, 'Warning: Array ddt_vn_hdf has size 0. Not serializing array.'\n    END IF")]

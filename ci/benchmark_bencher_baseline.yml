include:
  - local: 'ci/base.yml'

.benchmark_model_stencils:
  stage: benchmark
  script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source "$HOME/.cargo/env"
    - cargo install --git https://github.com/bencherdev/bencher --branch main --locked --force bencher_cli
    - uv sync --no-dev --extra=dace --extra=io --extra=testing --extra=$ICON4PY_NOX_UV_CUSTOM_SESSION_EXTRAS --group=test
    - source .venv/bin/activate
    - BENCHER_RESULTS_JSON="results_${CI_COMMIT_SHA}_${BACKEND}_${GRID}.json"
    - |
      bencher run \
      --project "$BENCHER_PROJECT" \
      --token "$BENCHER_API_TOKEN" \
      --branch main \
      --testbed "ci-runner:${SYSTEM_NAME}:${BACKEND}:${GRID}" \
      --threshold-measure latency \
      --threshold-test t_test \
      --threshold-max-sample-size 64 \
      --threshold-upper-boundary 0.99 \
      --thresholds-reset \
      --err \
      --adapter python_pytest \
      --file $BENCHER_RESULTS_JSON \
      "pytest --benchmark-json $BENCHER_RESULTS_JSON -v --benchmark-only --backend=$BACKEND --grid=$GRID ./model"
    - |
      cat <<EOF > flatten.py
      import argparse
      import json
      from flatten_json import flatten

      parser = argparse.ArgumentParser(description="Flatten a JSON file.")
      parser.add_argument("input_file", help="input JSON file")
      parser.add_argument("output_file", help="output JSON file")

      args = parser.parse_args()

      with open(args.input_file, "r") as file:
          data = json.load(file)

      flat_data = flatten(data, separator=".")

      with open(args.output_file, "w") as file:
          json.dump(flat_data, file, indent=2)
      EOF
    - pip install flatten_json
    - python flatten.py $BENCHER_RESULTS_JSON $BENCHER_RESULTS_JSON
    - |
      jq ". | {\"data_stream\": {\"type\": \"logs\", \"dataset\": \"service.icon4py.bencher.baseline.test\", \"namespace\": \"alps\"}} + ." $BENCHER_RESULTS_JSON > results_tmp.json && mv results_tmp.json $BENCHER_RESULTS_JSON
    - |
      curl -X POST \
      -H "Content-Type: application/json" \
      -d @"./${BENCHER_RESULTS_JSON}" \
      "${CSCS_LOGSTASH_URL}"
  parallel:
    matrix:
      - BACKEND: [gtfn_cpu, gtfn_gpu]
        GRID: [icon_grid, icon_grid_global]

# benchmark_bencher_baseline_x86_64:
#   extends: [.benchmark_model_stencils, .test_template_x86_64]

benchmark_bencher_baseline_aarch64:
  extends: [.benchmark_model_stencils, .test_template_aarch64]

include:
  - local: 'ci/base.yml'

.build_distributed_template:
  variables:
    UV_PROJECT_ENVIRONMENT: venv_dist
    USE_MPI: "YES"

.build_distributed:
  extends: [.build_distributed_template]
  variables:
    DOCKERFILE: ci/docker/distributed_venv.Dockerfile
    # Unique image name based on commit SHA,
    DOCKER_BUILD_ARGS: '["PYVERSION=$PYVERSION", "BASE_IMAGE=${BASE_IMAGE_${PYVERSION_PREFIX}}", "VENV=${UV_PROJECT_ENVIRONMENT}"]'
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/public/$ARCH/icon4py/icon4py-ci:$CI_COMMIT_SHA-$UV_PROJECT_ENVIRONMENT-$PYVERSION
    #MPI4PY_BUILD_BACKEND: "scikit-build-core"
    #MPI4PY_BUILD_MPICC: nvc


build_distributed:
    stage: build
    extends: [.container-builder-cscs-gh200, .build_distributed]
    needs: [build_baseimage_aarch64] #[build_image_aarch64]

.test_template_distributed:
  timeout: 8h
  image: $CSCS_REGISTRY_PATH/public/$ARCH/icon4py/icon4py-ci:$CI_COMMIT_SHA-$UV_PROJECT_ENVIRONMENT-$PYVERSION
  extends: [ .container-runner-santis-gh200, .build_distributed_template ]
  needs: [ build_distributed ]
  variables:
    #taken from ci/base.yml - need to figure out which ones are needed and which ones should go where
    SLURM_TIMELIMIT: '06:00:00'
    USE_MPI: "YES"
    SLURM_JOB_NUM_NODES: 1
    SLURM_NTASKS: 4
    CRAY_CUDA_MPS: 1
    VIRTUALENV_SYSTEM_SITE_PACKAGES: 1
    TEST_DATA_PATH: "/icon4py/ci/testdata"
    ICON_GRID_LOC: "${TEST_DATA_PATH}/grids/mch_ch_r04b09_dsl"
    CUDACXX: "${HPC_SDK_PATH}/compilers/bin/nvcc"
    NVFORTRAN_COMPILER: "${HPC_SDK_PATH}/compilers/bin/nvfortran"
    CC: "${HPC_SDK_PATH}/compilers/bin/nvc"
    MPICC: "${HPC_SDK_PATH}/compilers/bin/nvc"
    CSCS_ADDITIONAL_MOUNTS: '["/capstor/store/cscs/userlab/d126/icon4py/ci/testdata_002:$TEST_DATA_PATH"]'
    HPC_SDK_PATH: "/opt/nvidia/hpc_sdk/Linux_${ARCH}/24.11"
    # Grace-Hopper gpu architecture is not enabled by default in CUDA build
    CUDAARCHS: "90"
    # Limit test parallelism to avoid "OSError: too many open files" in the gt4py build stage.
    # Another problem, observed in test stage, is that gpu tests hang in combination with CUDA MPS,
    # when high test parallelism is used.
    NUM_PROCESSES: 16
    ICON4PY_NOX_UV_CUSTOM_SESSION_EXTRAS: "cuda12"


.test_distributed_aarch64:
  stage: test
  extends: [.test_template_distributed, .build_distributed_template]
  before_script:
    - cd /icon4py
    - ls -la $(pwd)
    - ls ${UV_PROJECT_ENVIRONMENT}/lib/python*/site-packages
    - echo "using MPICC ${MPICC}"
    - echo "using CC ${CC}"
  script:
    - . ${UV_PROJECT_ENVIRONMENT}/bin/activate && pytest -svv -k "mpi_tests" --datatest --with-mpi --backend=$BACKEND $COMPONENT
  parallel:
    matrix:
      - COMPONENT: [ diffusion, common] # [advection, diffusion, dycore, microphysics, common, driver]
        BACKEND: [ gtfn_cpu]
  rules:
    - when: on_success

test_model_distributed:
  extends: [.test_distributed_aarch64]

